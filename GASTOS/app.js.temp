// Estado de la aplicaci√≥n
console.log('üöÄ CARGANDO APP.JS - Inicio');

// Verificar si AppState ya existe en window para evitar duplicados
if (!window.AppState) {
    window.AppState = {
        currentMonth: new Date().toISOString().slice(0, 7),
        // M√≥dulos ahora son por mes: { "2025-10": { efectivo: 1000, banco: 2000, ... }, "2025-11": { ... } }
        modulesByMonth: {},
        transactions: []
    };
    console.log('‚úÖ AppState inicializado');
} else {
    console.log('‚ÑπÔ∏è AppState ya estaba inicializado');
}

// Referencia corta para el estado
const AppState = window.AppState;

// ==========================================
// MODO OSCURO
// ==========================================

// Inicializar tema
function initTheme() {
    const savedTheme = localStorage.getItem('theme') || 'light';
    document.documentElement.setAttribute('data-theme', savedTheme);
    updateThemeIcon(savedTheme);
}

// NOTE: Feature 'classic/modern' removed. Styles are managed via a single stylesheet (`styles.css`).

// Cambiar tema
function toggleTheme() {
    const currentTheme = document.documentElement.getAttribute('data-theme');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    
    document.documentElement.setAttribute('data-theme', newTheme);
    localStorage.setItem('theme', newTheme);
    updateThemeIcon(newTheme);
    
    // Animaci√≥n del icono
    const icon = document.querySelector('.theme-icon');
    icon.style.transform = 'rotate(360deg) scale(1.2)';
    setTimeout(() => {
        icon.style.transform = 'rotate(0deg) scale(1)';
    }, 500);
}

// Actualizar icono del tema
function updateThemeIcon(theme) {
    const icon = document.querySelector('.theme-icon');
    if (icon) {
        icon.textContent = theme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
    }
}

// Helper para obtener m√≥dulos del mes actual
function getModulesForCurrentMonth() {
    if (!AppState.modulesByMonth[AppState.currentMonth]) {
        AppState.modulesByMonth[AppState.currentMonth] = {
            efectivo: 0,
            banco: 0,
            ml_jona: 0,
            ml_ceci: 0
        };
    }
    return AppState.modulesByMonth[AppState.currentMonth];
}

// Configuraci√≥n de m√≥dulos
const MODULE_CONFIG = {
    efectivo: { name: 'Efectivo', icon: 'üíµ', color: '#10B981' },
    banco: { name: 'Banco', icon: 'üè¶', color: '#3B82F6' },
    ml_jona: { name: 'ML Jonathan', icon: 'üì¶', color: '#8B5CF6' },
    ml_ceci: { name: 'ML Cecilia', icon: 'üì¶', color: '#EC4899' },
    tarima: { name: 'La Tarima', icon: 'üè™', color: '#F59E0B' }
};

// Categor√≠as de transacciones
const CATEGORIES = {
    la_tarima: '',
    comida: '',
    transporte: '',
    servicios: '',
    salud: '',
    entretenimiento: '',
    compras: '',
    educacion: '',
    otros: ''
};

// Normalizar transacci√≥n: asegurar tipos correctos y formato de fecha
function normalizeTransaction(t) {
    const tx = Object.assign({}, t);

    // Monto: convertir comas a puntos, eliminar s√≠mbolos y forzar number
    if (tx.amount === undefined || tx.amount === null) {
        tx.amount = 0;
    }
    if (typeof tx.amount === 'string') {
        // Eliminar todo excepto d√≠gitos, comas, puntos y signo menos
        let s = tx.amount.replace(/[^0-9,\.-]/g, '');

        // Manejar separadores de miles y decimal seg√∫n presencia de '.' y ','
        if (s.includes('.') && s.includes(',')) {
            // Ej: 1.234,56 -> eliminar puntos (miles) y convertir coma a punto (decimal)
            s = s.replace(/\./g, '').replace(/,/g, '.');
        } else if (s.includes(',')) {
            // Ej: 1234,56 -> coma decimal
            s = s.replace(/,/g, '.');
        } else if (s.includes('.')) {
            // Si solo hay puntos, decidir si es decimal o separador de miles
            const parts = s.split('.');
            if (parts.length === 2) {
                // Un √∫nico punto: tratar siempre como decimal (aceptar cualquier cantidad de decimales)
                // Ej: 20.20 -> 20.20 ; 20.222 -> 20.222
                s = parts.join('.');
            } else {
                // M√∫ltiples puntos: probablemente separadores de miles, eliminar
                // Ej: 1.234.567 -> 1234567
                s = parts.join('');
            }
        }

        const n = parseFloat(s);
        tx.amount = isNaN(n) ? 0 : n;
    } else if (typeof tx.amount === 'number') {
        // ok
    } else {
        const n = parseFloat(tx.amount);
        tx.amount = isNaN(n) ? 0 : n;
    }

    // Fecha: intentar normalizar a YYYY-MM-DD
    if (tx.date) {
        // Si es Date
        if (tx.date instanceof Date && !isNaN(tx.date.getTime())) {
            tx.date = tx.date.toISOString().split('T')[0];
        } else if (typeof tx.date === 'string') {
            // Si ya est√° en formato YYYY-MM-DD, dejar
            if (/^\d{4}-\d{2}-\d{2}$/.test(tx.date)) {
                // ok
            } else {
                // Intentar parsear formatos comunes DD/MM/YYYY o DD-MM-YYYY
                const parts = tx.date.split(/[\/\-.]/).map(p => p.trim());
                if (parts.length === 3) {
                    let [p1, p2, p3] = parts;
                    let day, month, year;
                    if (p1.length === 4) { // YYYY/MM/DD
                        year = p1; month = p2; day = p3;
                    } else { // DD/MM/YYYY
                        day = p1; month = p2; year = p3;
                    }
                    if (year.length === 2) year = '20' + year;
                    day = String(day).padStart(2, '0');
                    month = String(month).padStart(2, '0');
                    if (/^\d{4}$/.test(year) && /^\d{2}$/.test(month) && /^\d{2}$/.test(day)) {
                        tx.date = `${year}-${month}-${day}`;
                    } else {
                        // fallback a fecha actual
                        tx.date = new Date().toISOString().split('T')[0];
                    }
                } else {
                    tx.date = new Date().toISOString().split('T')[0];
                }
            }
        }
    } else {
        tx.date = new Date().toISOString().split('T')[0];
    }

    // Normalizar strings
    tx.type = String(tx.type || '').toLowerCase();
    tx.module = String(tx.module || '').toLowerCase();
    tx.category = String(tx.category || 'otros');
    tx.description = String(tx.description || '');

    return tx;
}

// Inicializaci√≥n
document.addEventListener('DOMContentLoaded', () => {
    console.log('‚úÖ App iniciando...');
    initTheme(); // Inicializar tema primero
    loadData();
    initializeUI();
    attachEventListeners();
    updateDashboard();
    // Mostrar tambi√©n tarjetas de m√≥dulos/valores iniciales en el dashboard
    if (typeof displayModulesCards === 'function') displayModulesCards();
    displayTransactions();
    console.log('‚úÖ App lista!');
});

// Cargar datos del localStorage
function loadData() {
    const savedData = localStorage.getItem('gastosApp');
    if (savedData) {
        const data = JSON.parse(savedData);
        AppState.modulesByMonth = data.modulesByMonth || {};
        // Normalizar transacciones cargadas (por si vienen de versiones anteriores)
        const rawTx = data.transactions || [];
        try {
            AppState.transactions = rawTx.map(t => normalizeTransaction(t));
            console.log(`‚úÖ ${AppState.transactions.length} transacciones cargadas y normalizadas`);
        } catch (e) {
            console.error('‚ùå Error normalizando transacciones al cargar:', e);
            AppState.transactions = rawTx;
        }
        // No sobrescribir el mes actual a menos que se indique expl√≠citamente
        // AppState.currentMonth se mantiene con el valor actual
        console.log('‚úÖ Datos cargados desde localStorage');
    }
    
    // Asegurar que el mes actual se muestre correctamente
    updateMonthDisplay();
    console.log('Mes actual configurado a:', AppState.currentMonth);
}

// Guardar datos en localStorage
function saveData() {
    localStorage.setItem('gastosApp', JSON.stringify(AppState));
    console.log('üíæ Datos guardados en localStorage');
}

// Inicializar UI
function initializeUI() {
    updateMonthDisplay();
    initializeDayInput();
}

// Inicializar input de d√≠a con el √∫ltimo guardado o d√≠a actual
function initializeDayInput() {
    const savedDay = localStorage.getItem('lastSelectedDay') || new Date().getDate();
    const [year, month] = AppState.currentMonth.split('-').map(Number);
    const daysInMonth = new Date(year, month, 0).getDate(); // month sin restar 1 porque Date(year, month, 0) da √∫ltimo d√≠a del mes anterior
    
    // Ajustar el max del input seg√∫n los d√≠as del mes (formulario superior)
    const dayInput = document.getElementById('quickDay');
    if (dayInput) {
        dayInput.max = daysInMonth;
        // Restaurar el √∫ltimo d√≠a seleccionado (o d√≠a actual)
        const dayToSet = Math.min(parseInt(savedDay), daysInMonth);
        dayInput.value = dayToSet;
    }
    
    // Ajustar el max del input seg√∫n los d√≠as del mes (formulario inferior)
    const dayInputBottom = document.getElementById('quickDayBottom');
    if (dayInputBottom) {
        dayInputBottom.max = daysInMonth;
        const dayToSet = Math.min(parseInt(savedDay), daysInMonth);
        dayInputBottom.value = dayToSet;
    }
    
    // Ajustar el filtro de d√≠as tambi√©n
    const filterDay = document.getElementById('filterDay');
    if (filterDay) {
        filterDay.max = daysInMonth;
    }
}

// Actualizar display del mes
function updateMonthDisplay() {
    const monthNames = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
                       'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];
    const [year, month] = AppState.currentMonth.split('-');
    document.getElementById('currentMonth').textContent = 
        `${monthNames[parseInt(month) - 1]} ${year}`;
}

// Abrir selector de mes
function openMonthPicker() {
    const [year, month] = AppState.currentMonth.split('-');
    document.getElementById('pickerMonth').value = month;
    document.getElementById('pickerYear').value = year;
    document.getElementById('monthPickerModal').classList.add('active');
}

// Cerrar selector de mes
function closeMonthPicker() {
    document.getElementById('monthPickerModal').classList.remove('active');
}

// Manejar cambio de mes desde el picker
function handleMonthPickerSubmit(e) {
    e.preventDefault();
    const month = document.getElementById('pickerMonth').value;
    const year = document.getElementById('pickerYear').value;
    AppState.currentMonth = `${year}-${month}`;
    
    updateMonthDisplay();
    initializeDayInput();
    updateDashboard();
    displayRecentTransactions();
    displayTransactions();
    displayModulesCards();
    closeMonthPicker();
}

// Event Listeners
function attachEventListeners() {
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            switchTab(btn.dataset.tab);
        });
    });

    document.getElementById('addTransactionBtn').addEventListener('click', openTransactionModal);
    document.getElementById('closeModal').addEventListener('click', closeTransactionModal);
    document.getElementById('cancelTransaction').addEventListener('click', closeTransactionModal);
    
    document.getElementById('transactionModal').addEventListener('click', (e) => {
        if (e.target.id === 'transactionModal') {
            closeTransactionModal();
        }
    });

    document.getElementById('transactionForm').addEventListener('submit', handleTransactionSubmit);
    document.getElementById('quickAddForm').addEventListener('submit', handleQuickAddSubmit);
    document.getElementById('btnAddDetail').addEventListener('click', handleAddDetailClick);

    // Filtros del Dashboard
    const filterDayInput = document.getElementById('filterDay');
    const filterTypeDashboard = document.getElementById('filterTypeDashboard');
    const filterCategory = document.getElementById('filterCategory');
    const btnClearFilter = document.getElementById('btnClearFilter');
    
    if (filterDayInput) {
        filterDayInput.addEventListener('input', displayRecentTransactions);
    }
    
    if (filterTypeDashboard) {
        filterTypeDashboard.addEventListener('change', displayRecentTransactions);
    }
    
    if (filterCategory) {
        filterCategory.addEventListener('change', displayRecentTransactions);
    }
    
    if (btnClearFilter) {
        btnClearFilter.addEventListener('click', clearFilters);
    }

    document.getElementById('resetMonthBtn').addEventListener('click', handleResetMonth);
    
    // Month navigation
    document.getElementById('prevMonth').addEventListener('click', () => changeMonth(-1));
    document.getElementById('nextMonth').addEventListener('click', () => changeMonth(1));
    document.getElementById('currentMonth').addEventListener('click', openMonthPicker);
    
    // Month picker
    document.getElementById('closeMonthPicker').addEventListener('click', closeMonthPicker);
    document.getElementById('cancelMonthPicker').addEventListener('click', closeMonthPicker);
    document.getElementById('monthPickerForm').addEventListener('submit', handleMonthPickerSubmit);
    
    document.getElementById('monthPickerModal').addEventListener('click', (e) => {
        if (e.target.id === 'monthPickerModal') {
            closeMonthPicker();
        }
    });
    
    // Backup buttons
    const exportExcelBtn = document.getElementById('exportExcelBtn');
    const exportCSVBtn = document.getElementById('exportCSVBtn');
    const exportJSONBtn = document.getElementById('exportJSONBtn');
    const restoreBackupBtn = document.getElementById('restoreBackupBtn');
    const restoreFileInput = document.getElementById('restoreFileInput');
    
    if (exportExcelBtn) exportExcelBtn.addEventListener('click', downloadExcel);
    if (exportCSVBtn) exportCSVBtn.addEventListener('click', downloadCSV);
    if (exportJSONBtn) exportJSONBtn.addEventListener('click', downloadJSON);
    if (restoreBackupBtn) restoreBackupBtn.addEventListener('click', restoreFromBackup);
    if (restoreFileInput) restoreFileInput.addEventListener('change', handleRestoreFile);
    
    // Cargar √∫ltima fecha de exportaci√≥n
    const lastExport = localStorage.getItem('lastExportTime');
    if (lastExport) {
        const elem = document.getElementById('lastExportTime');
        if (elem) elem.textContent = lastExport;
    }
    
    // Theme toggle
    const themeToggle = document.getElementById('themeToggle');
    if (themeToggle) {
        themeToggle.addEventListener('click', toggleTheme);
    }

    // Formato en tiempo real para inputs de monto (focus/blur)
    const quickAmount = document.getElementById('quickAmount');
    const transAmount = document.getElementById('transactionAmount');

    function formatInputDisplay(el) {
        if (!el) return;
        const n = normalizeTransaction({ amount: el.value }).amount;
        // Si el valor es 0, dejar el campo vac√≠o
        if (Number(n) === 0 || !el.value) {
            el.value = '';
            return;
        }
        const formatted = new Intl.NumberFormat('es-AR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(Number(n));
        el.value = formatted;
    }

    function unformatInputForEdit(el) {
        if (!el) return;
        const n = normalizeTransaction({ amount: el.value }).amount;
        // Si es 0 o est√° vac√≠o, dejar vac√≠o
        if (Number(n) === 0 || !el.value) {
            el.value = '';
            return;
        }
        // Mostrar con punto decimal para facilitar edici√≥n (no usar separador de miles)
        // Mantener hasta 5 decimales durante edici√≥n si existen
        const display = (Math.round(n * 100000) / 100000).toString();
        el.value = display;
    }

    if (quickAmount) {
        quickAmount.addEventListener('focus', (e) => unformatInputForEdit(e.target));
        quickAmount.addEventListener('blur', (e) => formatInputDisplay(e.target));
        quickAmount.addEventListener('paste', (e) => {
            // Dejamos que paste ocurra, luego formateamos en next tick
            setTimeout(() => formatInputDisplay(quickAmount), 50);
        });
    }

    if (transAmount) {
        transAmount.addEventListener('focus', (e) => unformatInputForEdit(e.target));
        transAmount.addEventListener('blur', (e) => formatInputDisplay(e.target));
        transAmount.addEventListener('paste', (e) => {
            setTimeout(() => formatInputDisplay(transAmount), 50);
        });
    }

    // Atajos de teclado para Quick Add - presionar Enter en selects env√≠a el formulario
    const quickType = document.getElementById('quickType');
    const quickCategory = document.getElementById('quickCategory');
    
    if (quickType) {
        quickType.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                document.getElementById('quickAddForm').requestSubmit();
            }
        });
    }
    
    if (quickCategory) {
        quickCategory.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                document.getElementById('quickAddForm').requestSubmit();
            }
        });
    }
}

// Limpiar todos los filtros
function clearFilters() {
    const filterDay = document.getElementById('filterDay');
    const filterTypeDashboard = document.getElementById('filterTypeDashboard');
    const filterCategory = document.getElementById('filterCategory');
    
    if (filterDay) filterDay.value = '';
    if (filterTypeDashboard) filterTypeDashboard.value = 'all';
    if (filterCategory) filterCategory.value = 'all';
    
    displayRecentTransactions();
}

// Funci√≥n legacy para compatibilidad
function clearDayFilter() {
    clearFilters();
}

// Cambiar mes
function changeMonth(direction) {
    const [year, month] = AppState.currentMonth.split('-').map(Number);
    const date = new Date(year, month - 1 + direction, 1);
    AppState.currentMonth = date.toISOString().slice(0, 7);
    
    // Limpiar filtro de d√≠a al cambiar de mes
    const filterDay = document.getElementById('filterDay');
    if (filterDay) {
        filterDay.value = '';
    }
    
    updateMonthDisplay();
    initializeDayInput();
    updateDashboard();
    displayRecentTransactions();
    displayTransactions();
    displayModulesCards(); // Actualizar m√≥dulos al cambiar de mes
    
    saveData();
}

// Cambiar tab
function switchTab(tabName) {
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.toggle('active', btn.dataset.tab === tabName);
    });

    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.toggle('active', content.id === tabName);
    });

    if (tabName === 'dashboard') {
        updateDashboard();
    } else if (tabName === 'modules') {
        displayModulesCards();
    }
}

// Actualizar dashboard
function updateDashboard() {
    try {
        const totals = calculateTotals();
        
        // Actualizar totales generales
    const totalIncomeEl = document.getElementById('totalIncome');
    const totalExpensesEl = document.getElementById('totalExpenses');
    const totalBalanceEl = document.getElementById('totalBalance');

    // Saldo actual debe incluir el saldo inicial (saldos por m√≥dulos) + ingresos/ventas - gastos
    const currentModules = getModulesForCurrentMonth();
    const initialSum = Object.values(currentModules).reduce((s, v) => s + (parseFloat(v) || 0), 0);
    const balanceWithInitial = initialSum + (totals.income - totals.expenses);

    if (totalIncomeEl) totalIncomeEl.textContent = formatCurrency(totals.income);
    if (totalExpensesEl) totalExpensesEl.textContent = formatCurrency(totals.expenses);
    if (totalBalanceEl) totalBalanceEl.textContent = formatCurrency(balanceWithInitial);
        
        // Actualizar estad√≠sticas de La Tarima
        const tarimaStats = document.getElementById('tarimaStats');
        if (tarimaStats) {
            tarimaStats.innerHTML = `
                <div class="balance-segmented" style="margin-top: 1rem;">
                    <div class="segment">
                        <div class="segment-label">VENTAS</div>
                        <div class="segment-amount">${formatCurrency(totals.tarima?.ventas || 0)}</div>
                    </div>
                    
                    <div class="segment">
                        <div class="segment-label">GASTOS</div>
                        <div class="segment-amount">${formatCurrency(totals.tarima?.gastos || 0)}</div>
                    </div>
                    
                    <div class="segment">
                        <div class="segment-label">RENTABILIDAD</div>
                        <div class="segment-amount" style="color: ${(totals.tarima?.rentabilidad || 0) >= 0 ? '#16A34A' : '#DC2626'};">
                            ${formatCurrency(totals.tarima?.rentabilidad || 0)}
                        </div>
                    </div>
                    
                    <div class="segment">
                        <div class="segment-label">MARGEN</div>
                        <div class="segment-amount">
                            ${Number(totals.tarima?.margen || 0).toLocaleString('es-AR', { maximumFractionDigits: 0 })}%
                        </div>
                    </div>
                </div>
            `;
        }
        
        // Actualizar gr√°fico de categor√≠as
        if (typeof displayCategoryChart === 'function') {
            displayCategoryChart(totals.categoryExpenses || {});
        }
        
        // Actualizar transacciones recientes
        if (typeof displayRecentTransactions === 'function') {
            displayRecentTransactions();
        }
    } catch (error) {
        console.error('Error en updateDashboard:', error);
    }
}

// Calcular totales
function calculateTotals() {
    console.log('Calculando totales para el mes:', AppState.currentMonth);
    
    const currentMonthTransactions = AppState.transactions.filter(t => 
        t && t.date && t.date.startsWith && t.date.startsWith(AppState.currentMonth)
    );

    console.log('Transacciones del mes actual:', currentMonthTransactions);

    const totals = {
        income: 0,
        expenses: 0,
        balance: 0,
        categoryExpenses: {},
        // Nuevos totales para La Tarima
        tarima: {
            ventas: 0,
            gastos: 0,
            rentabilidad: 0,
            margen: 0
        }
    };

    currentMonthTransactions.forEach(t => {
        // Asegurarse de que el monto sea un n√∫mero
        const amount = parseFloat(t.amount) || 0;
        
        // Convertir a min√∫sculas para evitar problemas de may√∫sculas/min√∫sculas
        const module = String(t.module || '').toLowerCase();
        const type = String(t.type || '').toLowerCase();
        
        console.log('Procesando transacci√≥n:', { module, type, amount, t });
        
        // Si es de La Tarima
        if (module === 'tarima' || t.category === 'la_tarima') {
            console.log('Transacci√≥n de La Tarima encontrada:', t);
            
            if (type === 'ingreso' || type === 'venta') {
                // Sumar tanto a ingresos generales como a ventas de La Tarima
                totals.income += amount;
                totals.tarima.ventas += amount;
                console.log('Sumando a ventas de La Tarima:', amount);
            } else if (type === 'gasto') {
                totals.expenses += amount;
                totals.tarima.gastos += amount;
                console.log('Sumando a gastos de La Tarima:', amount);
            }
        } 
        // Si no es de La Tarima
        else {
            if (type === 'ingreso' || type === 'venta') {
                totals.income += amount;
            } else if (type === 'gasto') {
                totals.expenses += amount;
            }
        }
        
        // Agrupar por categor√≠a (solo para gastos)
        if (t.type === 'gasto' && t.category) {
            if (!totals.categoryExpenses[t.category]) {
                totals.categoryExpenses[t.category] = 0;
            }
            totals.categoryExpenses[t.category] += amount;
        }
    });

    // Calcular rentabilidad de La Tarima (Ganancia Neta)
    totals.tarima.rentabilidad = totals.tarima.ventas - totals.tarima.gastos;
    
    // Calcular margen de rentabilidad: (Ventas / Gastos) * 100
    if (totals.tarima.gastos > 0) {
        const margen = (totals.tarima.ventas / totals.tarima.gastos) * 100;
        // Redondear a 2 decimales
        totals.tarima.margen = Math.round(margen * 100) / 100;
    } else if (totals.tarima.ventas > 0) {
        // Si no hay gastos pero s√≠ ventas, el margen es infinito
        totals.tarima.margen = Infinity;
    } else {
        // Si no hay ni ventas ni gastos, el margen es 0
        totals.tarima.margen = 0;
    }
    
    // Asegurar que no haya NaN o valores infinitos
    if (isNaN(totals.tarima.margen) || !isFinite(totals.tarima.margen)) {
        totals.tarima.margen = 0;
    }
    
    console.log('Totales calculados para La Tarima:', totals.tarima);

    totals.balance = totals.income - totals.expenses;
    return totals;
}

// Mostrar transacciones recientes
function displayRecentTransactions() {
    const container = document.getElementById('recentTransactions');
    
    if (!container) {
        console.error('Container recentTransactions no encontrado');
        return;
    }
    
    console.log('Total transacciones:', AppState.transactions.length);
    console.log('Mes actual:', AppState.currentMonth);
    
    let recentTransactions = AppState.transactions
        .filter(t => t.date && t.date.startsWith(AppState.currentMonth));
    
    // Filtrar por d√≠a si hay un valor en el filtro
    const filterDay = document.getElementById('filterDay');
    if (filterDay && filterDay.value) {
        const selectedDay = filterDay.value.padStart(2, '0');
        recentTransactions = recentTransactions.filter(t => {
            const day = t.date.split('-')[2];
            return day === selectedDay;
        });
    }
    
    // Filtrar por tipo
    const filterTypeDashboard = document.getElementById('filterTypeDashboard');
    if (filterTypeDashboard && filterTypeDashboard.value !== 'all') {
        recentTransactions = recentTransactions.filter(t => t.type === filterTypeDashboard.value);
    }
    
    // Filtrar por categor√≠a
    const filterCategory = document.getElementById('filterCategory');
    if (filterCategory && filterCategory.value !== 'all') {
        recentTransactions = recentTransactions.filter(t => t.category === filterCategory.value);
    }
    
    recentTransactions = recentTransactions.sort((a, b) => {
        // Ordenar por fecha descendente (m√°s reciente primero)
        const dateA = new Date(a.date);
        const dateB = new Date(b.date);
        return dateB - dateA;
    });

    console.log('Transacciones filtradas:', recentTransactions.length);

    if (recentTransactions.length === 0) {
        container.innerHTML = '<div class="empty-state" style="padding: 1.5rem; text-align: center; color: #6B7280;">No hay transacciones recientes</div>';
        return;
    }

    container.innerHTML = '';
    recentTransactions.forEach(transaction => {
        const typeCircle = transaction.type === 'gasto' ? '<span class="circle-indicator red"></span>' : 
                          transaction.type === 'ingreso' ? '<span class="circle-indicator green"></span>' : 
                          '<span class="circle-indicator yellow"></span>';
        const categoryIcon = CATEGORIES[transaction.category] || '';
        const sign = transaction.type === 'gasto' ? '-' : '+';
        
        // Mostrar categor√≠a siempre, y descripci√≥n si existe
        const categoryText = formatCategoryName(transaction.category);
        const displayText = transaction.description 
            ? `${categoryText} - ${transaction.description}` 
            : categoryText;
        
        // Obtener solo el d√≠a de la fecha
        const day = transaction.date.split('-')[2];
        
        const item = document.createElement('div');
        item.className = 'recent-item';
        item.innerHTML = `
            <div class="recent-item-info">
                <span class="recent-day">${day}</span>
                ${typeCircle}
                <span>${categoryIcon}</span>
                <span>${displayText}</span>
            </div>
            <div class="recent-item-actions">
                <div class="recent-item-amount ${transaction.type}">
                    ${sign}${formatCurrency(transaction.amount)}
                </div>
                <button class="btn-edit" data-id="${transaction.id}" title="Editar">‚úèÔ∏è</button>
                <button class="btn-delete" data-id="${transaction.id}" title="Eliminar">üóëÔ∏è</button>
            </div>
        `;
        
        // Agregar event listeners a los botones
        const editBtn = item.querySelector('.btn-edit');
        editBtn.addEventListener('click', () => handleEditTransaction(transaction.id));
        
        const deleteBtn = item.querySelector('.btn-delete');
        deleteBtn.addEventListener('click', () => handleDeleteTransaction(transaction.id));
        
        container.appendChild(item);
    });
}

// Eliminar transacci√≥n
function handleDeleteTransaction(transactionId) {
    if (!confirm('¬øEst√°s seguro de eliminar esta transacci√≥n?')) {
        return;
    }
    
    const index = AppState.transactions.findIndex(t => t.id === transactionId);
    if (index !== -1) {
        AppState.transactions.splice(index, 1);
        saveData();
        updateDashboard();
        displayRecentTransactions();
        displayTransactions();
        showNotification('üóëÔ∏è Transacci√≥n eliminada');
    }
}

// Formatear nombre de categor√≠a
function formatCategoryName(category) {
    if (category === 'la_tarima') return 'La Tarima';
    return category.charAt(0).toUpperCase() + category.slice(1);
}

// Mostrar gr√°fico de categor√≠as
function displayCategoryChart(categoryExpenses) {
    const chartContainer = document.getElementById('categoryChart');
    
    if (Object.keys(categoryExpenses).length === 0) {
        chartContainer.innerHTML = '<div class="empty-state">No hay gastos registrados este mes</div>';
        return;
    }

    const maxAmount = Math.max(...Object.values(categoryExpenses));
    chartContainer.innerHTML = '';

    Object.entries(categoryExpenses)
        .sort((a, b) => b[1] - a[1])
        .forEach(([category, amount]) => {
            const percentage = (amount / maxAmount) * 100;
            const bar = document.createElement('div');
            bar.className = 'chart-bar';
            bar.innerHTML = `
                <div class="chart-bar-label">
                    <span>${CATEGORIES[category]} ${formatCategoryName(category)}</span>
                    <span>${formatCurrency(amount)}</span>
                </div>
                <div class="chart-bar-fill" style="width: ${percentage}%"></div>
            `;
            chartContainer.appendChild(bar);
        });
}

// Mostrar transacciones
// Mostrar transacciones (DEPRECATED - pesta√±a eliminada)
function displayTransactions() {
    // Esta funci√≥n ya no se usa porque eliminamos la pesta√±a Transacciones
    // Los filtros ahora est√°n en displayRecentTransactions()
    return;
}

// Crear elemento de transacci√≥n
function createTransactionElement(transaction) {
    const item = document.createElement('div');
    item.className = 'transaction-item';
    
    const typeText = transaction.type === 'gasto' ? 'Gasto' : 
                     transaction.type === 'ingreso' ? 'Ingreso' : 'Venta';
    
    const typeCircle = transaction.type === 'gasto' ? '<span class="circle-indicator red"></span>' : 
                       transaction.type === 'ingreso' ? '<span class="circle-indicator green"></span>' : 
                       '<span class="circle-indicator yellow"></span>';
    
    const formattedDate = new Date(transaction.date + 'T00:00:00').toLocaleDateString('es-ES', {
        day: '2-digit',
        month: 'short',
        year: '2-digit'
    });

    const sign = transaction.type === 'gasto' ? '-' : '+';
    
    item.innerHTML = `
        <div class="td-fecha">${formattedDate}</div>
        <div class="td-tipo">${typeCircle} ${typeText}</div>
        <div class="td-categoria">${formatCategoryName(transaction.category)}</div>
        <div class="td-descripcion">${transaction.description || '-'}</div>
        <div class="td-monto ${transaction.type}">${sign}${formatCurrency(transaction.amount)}</div>
        <div class="td-actions">
            <button class="btn-icon" data-id="${transaction.id}" onclick="editTransaction('${transaction.id}')" title="Editar">‚úèÔ∏è</button>
            <button class="btn-icon" data-id="${transaction.id}" onclick="deleteTransaction('${transaction.id}')" title="Eliminar">üóëÔ∏è</button>
        </div>
    `;
    
    return item;
}

// Editar transacci√≥n
function handleEditTransaction(transactionId) {
    const transaction = AppState.transactions.find(t => t.id === transactionId);
    if (!transaction) return;
    
    // Encontrar el elemento de la transacci√≥n
    const transactionElements = document.querySelectorAll('.transaction-item, .recent-item');
    let targetElement = null;
    
    transactionElements.forEach(el => {
        const editBtn = el.querySelector(`[data-id="${transactionId}"]`);
        if (editBtn) targetElement = el;
    });
    
    if (!targetElement) return;
    
    // Crear formulario inline exactamente igual al quick add
    const formattedAmount = transaction.amount.toString().replace('.', ',');
    
    // Extraer el d√≠a de la fecha
    const transactionDate = new Date(transaction.date + 'T00:00:00');
    const day = transactionDate.getDate();
    
    // Formulario id√©ntico al quick add
    targetElement.innerHTML = `
        <form class="quick-add-form-inline edit-mode" data-id="${transactionId}" data-original-date="${transaction.date}">
            <input type="number" 
                   name="day" 
                   value="${day}"
                   placeholder="D√≠a"
                   min="1"
                   max="31"
                   required>
            
            <input type="text" 
                   name="amount" 
                   value="${formattedAmount}"
                   placeholder="$ Monto" 
                   inputmode="decimal"
                   required>
            
            <select name="type" class="edit-type-${transactionId}" required>
                <option value="ingreso" ${transaction.type === 'ingreso' ? 'selected' : ''}>üí∞ Ingreso</option>
                <option value="gasto" ${transaction.type === 'gasto' ? 'selected' : ''}>üí∏ Gasto</option>
                <option value="venta" ${transaction.type === 'venta' ? 'selected' : ''}>üíµ Venta</option>
            </select>

            <select name="category" class="edit-category-${transactionId}" required>
                <option value="la_tarima" ${transaction.category === 'la_tarima' ? 'selected' : ''}>üî® La Tarima</option>
                <option value="comida" ${transaction.category === 'comida' ? 'selected' : ''}>üçî Comida</option>
                <option value="transporte" ${transaction.category === 'transporte' ? 'selected' : ''}>üöó Transporte</option>
                <option value="servicios" ${transaction.category === 'servicios' ? 'selected' : ''}>üí° Servicios</option>
                <option value="salud" ${transaction.category === 'salud' ? 'selected' : ''}>üè• Salud</option>
                <option value="entretenimiento" ${transaction.category === 'entretenimiento' ? 'selected' : ''}>üéÆ Entret.</option>
                <option value="compras" ${transaction.category === 'compras' ? 'selected' : ''}>üõí Compras</option>
                <option value="educacion" ${transaction.category === 'educacion' ? 'selected' : ''}>üìö Educ.</option>
                <option value="otros" ${transaction.category === 'otros' ? 'selected' : ''}>üì¶ Otros</option>
            </select>

            <button type="button" class="btn-add-detail-inline" onclick="editAddDetail('${transactionId}')" title="Agregar detalle">
                ‚ûï
            </button>

            <input type="hidden" name="description" value="${transaction.description || ''}">

            <button type="submit" class="btn-quick-add-inline" title="Guardar">
                ‚úÖ
            </button>
        </form>
    `;
    
    // Agregar event listener al formulario
    const form = targetElement.querySelector('form');
    form.addEventListener('submit', handleInlineEditSubmit);
    
    // Agregar event listeners de Enter a los selects
    const typeSelect = form.querySelector('.edit-type-' + transactionId);
    const categorySelect = form.querySelector('.edit-category-' + transactionId);
    
    if (typeSelect) {
        typeSelect.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                form.requestSubmit();
            }
        });
    }
    
    if (categorySelect) {
        categorySelect.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                form.requestSubmit();
            }
        });
    }
}

function editAddDetail(transactionId) {
    const form = document.querySelector(`.edit-mode[data-id="${transactionId}"]`);
    if (!form) return;
    
    const currentDesc = form.querySelector('input[name="description"]').value;
    const description = prompt('üìù Ingresa el detalle de la transacci√≥n:', currentDesc);
    
    if (description !== null) {
        form.querySelector('input[name="description"]').value = description.trim();
    }
}

function handleInlineEditSubmit(e) {
    e.preventDefault();
    const formData = new FormData(e.target);
    const transactionId = e.target.dataset.id;
    const originalDate = e.target.dataset.originalDate;
    
    // Construir la nueva fecha usando el a√±o y mes actual, y el d√≠a del formulario
    const currentDate = new Date(originalDate + 'T00:00:00');
    const year = currentDate.getFullYear();
    const month = String(currentDate.getMonth() + 1).padStart(2, '0');
    const day = String(formData.get('day')).padStart(2, '0');
    const newDate = `${year}-${month}-${day}`;
    
    const index = AppState.transactions.findIndex(t => t.id === transactionId);
    if (index !== -1) {
        let transaction = {
            id: transactionId,
            type: formData.get('type'),
            module: AppState.transactions[index].module, // Mantener el m√≥dulo original
            amount: formData.get('amount'),
            category: formData.get('category'),
            date: newDate,
            description: formData.get('description') || ''
        };
        
        transaction = normalizeTransaction(transaction);
        AppState.transactions[index] = transaction;
        
        saveData();
        updateDashboard();
        displayRecentTransactions();
        displayTransactions();
        
        showNotification('‚úÖ Transacci√≥n actualizada');
    }
}

function cancelEdit() {
    updateDashboard();
    displayRecentTransactions();
    displayTransactions();
}

function editTransaction(id) {
    handleEditTransaction(id);
}

// Modal de transacci√≥n
function openTransactionModal() {
    document.getElementById('transactionModal').classList.add('active');
    document.getElementById('transactionForm').reset();
    document.getElementById('transactionDate').valueAsDate = new Date();
    // Limpiar el ID de edici√≥n
    delete document.getElementById('transactionForm').dataset.editId;
}

function closeTransactionModal() {
    document.getElementById('transactionModal').classList.remove('active');
    // Limpiar el ID de edici√≥n al cerrar
    delete document.getElementById('transactionForm').dataset.editId;
}

// Mostrar tarjetas de m√≥dulos
function displayModulesCards() {
    const moduleNames = ['efectivo', 'banco', 'ml_jona', 'ml_ceci'];
    const currentModules = getModulesForCurrentMonth();
    
    // Actualizar los montos de cada m√≥dulo
    moduleNames.forEach(moduleName => {
        const amount = currentModules[moduleName] || 0;
        const element = document.getElementById(`${moduleName}-amount`);
        if (element) {
            element.textContent = formatCurrency(amount);
        }
    });
    
    // INICIAL: Suma de los m√≥dulos del mes actual
    const totalInicial = Object.values(currentModules).reduce((sum, val) => sum + val, 0);
    
    // MES ANTERIOR: Calcular el saldo actual del mes anterior
    const [year, month] = AppState.currentMonth.split('-').map(Number);
    const previousMonthDate = new Date(year, month - 2, 1); // -2 porque los meses van de 0-11
    const previousMonthKey = previousMonthDate.toISOString().slice(0, 7);
    
    // Obtener m√≥dulos del mes anterior
    const previousModules = AppState.modulesByMonth[previousMonthKey] || {
        efectivo: 0, banco: 0, ml_jona: 0, ml_ceci: 0
    };
    const totalInicialMesAnterior = Object.values(previousModules).reduce((sum, val) => sum + val, 0);
    
    // Calcular ingresos y gastos del mes anterior
    const previousMonthTransactions = AppState.transactions.filter(t => 
        t.date && t.date.startsWith(previousMonthKey)
    );
    
    let ingresosMesAnterior = 0;
    let gastosMesAnterior = 0;
    
    previousMonthTransactions.forEach(t => {
        if (t.type === 'ingreso' || t.type === 'venta') {
            ingresosMesAnterior += t.amount;
        } else if (t.type === 'gasto') {
            gastosMesAnterior += t.amount;
        }
    });
    
    // Saldo actual del mes anterior = inicial + ingresos - gastos
    const saldoActualMesAnterior = totalInicialMesAnterior + ingresosMesAnterior - gastosMesAnterior;
    
    // DIFERENCIA: Inicial del mes actual - Saldo actual del mes anterior
    const diferencia = totalInicial - saldoActualMesAnterior;
    
    // AHORRO: Diferencia + Ingresos del mes actual
    const currentMonthTransactions = AppState.transactions.filter(t => 
        t.date && t.date.startsWith(AppState.currentMonth)
    );
    
    let ingresosActuales = 0;
    let gastosActuales = 0;

    currentMonthTransactions.forEach(t => {
        if (t.type === 'ingreso' || t.type === 'venta') {
            ingresosActuales += t.amount;
        } else if (t.type === 'gasto') {
            gastosActuales += t.amount;
        }
    });

    // Saldo actual del mes = inicial + ingresos - gastos
    const saldoActualMes = totalInicial + ingresosActuales - gastosActuales;

    // Ahorro = Saldo actual del mes - Saldo actual del mes anterior
    const ahorro = saldoActualMes - saldoActualMesAnterior;
    
    // Actualizar la barra de informaci√≥n
    const totalInicialEl = document.getElementById('totalInicial');
    const totalInicialModulesEl = document.getElementById('totalInicialModules');
    const totalMesAnteriorEl = document.getElementById('totalMesAnterior');
    const totalDiferenciaEl = document.getElementById('totalDiferencia');
    const totalAhorroEl = document.getElementById('totalAhorro');
    
    if (totalInicialEl) totalInicialEl.textContent = formatCurrency(totalInicial);
    if (totalInicialModulesEl) totalInicialModulesEl.textContent = formatCurrency(totalInicial);
    if (totalMesAnteriorEl) totalMesAnteriorEl.textContent = formatCurrency(saldoActualMesAnterior);
    if (totalDiferenciaEl) {
        totalDiferenciaEl.textContent = formatCurrency(diferencia);
        // Cambiar color seg√∫n si es positivo o negativo (colores m√°s oscuros para fondo claro)
        if (diferencia > 0) {
            totalDiferenciaEl.style.color = '#059669'; // verde oscuro
        } else if (diferencia < 0) {
            totalDiferenciaEl.style.color = '#DC2626'; // rojo oscuro
        } else {
            totalDiferenciaEl.style.color = '#111827'; // gris oscuro
        }
    }
    if (totalAhorroEl) {
        totalAhorroEl.textContent = formatCurrency(ahorro);
        // Color seg√∫n si el ahorro es positivo o negativo (colores m√°s oscuros para fondo claro)
        if (ahorro > 0) {
            totalAhorroEl.style.color = '#059669'; // verde oscuro
        } else if (ahorro < 0) {
            totalAhorroEl.style.color = '#DC2626'; // rojo oscuro
        } else {
            totalAhorroEl.style.color = '#111827'; // gris oscuro
        }
    }
}

// Editar m√≥dulo individual
function editModule(moduleName) {
    const currentModules = getModulesForCurrentMonth();
    const currentAmount = currentModules[moduleName] || 0;
    const moduleInfo = MODULE_CONFIG[moduleName];
    
    const newAmount = prompt(
        `${moduleInfo.icon} ${moduleInfo.name}\n\nIngresa el saldo inicial del mes:`,
        currentAmount
    );
    
    if (newAmount !== null) {
        const parsedAmount = parseFloat(newAmount);
        if (!isNaN(parsedAmount)) {
            currentModules[moduleName] = parsedAmount;
            saveData();
            updateDashboard();
            displayModulesCards();
            showNotification(`‚úÖ ${moduleInfo.name} actualizado`);
        } else {
            alert('Por favor ingresa un n√∫mero v√°lido');
        }
    }
}

// Hacer la funci√≥n global para que funcione con onclick
window.editModule = editModule;

// Manejar submit de m√≥dulos (removido, ahora se usa editModule)

// Manejar submit de transacci√≥n
function handleTransactionSubmit(e) {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const editId = e.target.dataset.editId;
    
    if (editId) {
        // Modo edici√≥n: actualizar transacci√≥n existente
        const index = AppState.transactions.findIndex(t => t.id === editId);
        if (index !== -1) {
            let transaction = {
                id: editId,
                type: formData.get('type'),
                module: formData.get('module'),
                amount: formData.get('amount'),
                category: formData.get('category'),
                date: formData.get('date'),
                description: formData.get('description')
            };
            
            transaction = normalizeTransaction(transaction);
            AppState.transactions[index] = transaction;
            showNotification('‚úÖ Transacci√≥n actualizada');
        }
    } else {
        // Modo creaci√≥n: nueva transacci√≥n
        let transaction = {
            id: Date.now().toString(),
            type: formData.get('type'),
            module: formData.get('module'),
            amount: formData.get('amount'),
            category: formData.get('category'),
            date: formData.get('date'),
            description: formData.get('description')
        };

        transaction = normalizeTransaction(transaction);
        AppState.transactions.push(transaction);
        showNotification('‚úÖ Transacci√≥n guardada');
    }
    
    saveData();
    closeTransactionModal();
    updateDashboard();
    displayTransactions();
}

// Manejar clic en bot√≥n de agregar detalle
function handleAddDetailClick() {
    const description = prompt('üìù Ingresa el detalle de la transacci√≥n:');
    if (description !== null && description.trim() !== '') {
        // Guardar el detalle en un campo oculto o variable temporal
        const form = document.getElementById('quickAddForm');
        let descInput = form.querySelector('input[name="description"]');
        
        // Si no existe el input oculto, crearlo
        if (!descInput) {
            descInput = document.createElement('input');
            descInput.type = 'hidden';
            descInput.name = 'description';
            form.appendChild(descInput);
        }
        
        descInput.value = description;
        
        // Cambiar visualmente el bot√≥n para indicar que hay un detalle
        const btn = document.getElementById('btnAddDetail');
        btn.textContent = 'üìù';
        btn.style.color = '#059669';
        
        showNotification('üìù Detalle agregado');
    }
}

// Manejar submit de formulario r√°pido
function handleQuickAddSubmit(e) {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const selectedDay = parseInt(formData.get('day'));
    const [year, month] = AppState.currentMonth.split('-');
    
    // Validar que el d√≠a sea v√°lido para el mes actual
    const daysInMonth = new Date(parseInt(year), parseInt(month), 0).getDate();
    if (selectedDay < 1 || selectedDay > daysInMonth) {
        alert(`El d√≠a debe estar entre 1 y ${daysInMonth} para este mes.`);
        return;
    }
    
    // Guardar el d√≠a seleccionado para futuras transacciones
    localStorage.setItem('lastSelectedDay', selectedDay);
    
    // Construir la fecha completa
    const dateStr = `${year}-${month}-${String(selectedDay).padStart(2, '0')}`;
    
    // Obtener categor√≠a y tipo de transacci√≥n
    const category = formData.get('category');
    const type = formData.get('type');
    
    // Determinar el m√≥dulo basado en la categor√≠a
    const module = (category === 'la_tarima') ? 'tarima' : 'general';
    
    // Si es una venta o ingreso de La Tarima, asegurarse de que el tipo sea 'ingreso' o 'venta'
    let transactionType = type;
    if (category === 'la_tarima' && (type === 'ingreso' || type === 'venta')) {
        transactionType = 'ingreso'; // Unificar ingresos y ventas para La Tarima
    }
    
    console.log('Creando transacci√≥n:', { category, module, type: transactionType });
    
    const transaction = {
        id: Date.now().toString(),
        type: transactionType,
        module: module,
        amount: formData.get('amount'),
        category: category,
        date: dateStr,
        description: formData.get('description') || ''
    };

    const normalized = normalizeTransaction(transaction);
    AppState.transactions.push(normalized);
    
    saveData();
    
    // Limpiar solo el campo de monto y mantener el foco en √©l
    document.getElementById('quickAmount').value = '';
    document.getElementById('quickAmount').focus();
    
    // Resetear el bot√≥n de detalle y limpiar el campo oculto
    const btnDetail = document.getElementById('btnAddDetail');
    btnDetail.textContent = '‚ûï';
    btnDetail.style.color = '#3B82F6';
    const descInput = e.target.querySelector('input[name="description"]');
    if (descInput) {
        descInput.value = '';
    }
    
    // Actualizar todas las vistas
    console.log('Actualizando la interfaz...');
    
    // Actualizar dashboard
    updateDashboard();
    
    // Actualizar lista de transacciones (deprecated)
    if (typeof displayTransactions === 'function') {
        displayTransactions();
    }
    
    // Forzar un repintado del navegador
    document.body.offsetHeight;
    
    // Feedback visual
    const btn = e.target.querySelector('.btn-quick-add-inline');
    const originalEmoji = btn.textContent;
    btn.textContent = '‚úì';
    btn.style.background = '#10B981';
    btn.style.color = 'white';
    
    setTimeout(() => {
        btn.textContent = originalEmoji;
        btn.style.background = '';
        btn.style.color = '';
    }, 800);
}

// Eliminar transacci√≥n
function deleteTransaction(id) {
    if (!confirm('¬øEst√°s seguro de eliminar esta transacci√≥n?')) {
        return;
    }

    AppState.transactions = AppState.transactions.filter(t => t.id !== id);
    saveData();
    
    updateDashboard();
    displayTransactions();
    
    showNotification('üóëÔ∏è Transacci√≥n eliminada');
}

// Reiniciar mes
function handleResetMonth() {
    const confirmation = prompt('‚ö†Ô∏è ADVERTENCIA: Esto eliminar√° TODAS las transacciones del mes actual.\n\nEscribe "CONFIRMAR" para continuar:');
    
    if (confirmation !== 'CONFIRMAR') {
        showNotification('‚ùå Operaci√≥n cancelada');
        return;
    }

    AppState.transactions = AppState.transactions.filter(t => 
        !t.date.startsWith(AppState.currentMonth)
    );

    saveData();
    updateDashboard();
    displayTransactions();
    
    showNotification('üîÑ Mes reiniciado correctamente');
}

// Formatear moneda
function formatCurrency(amount) {
    // Mostrar siempre 2 decimales en la UI
    const options = {
        style: 'currency',
        currency: 'ARS',
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
    };
    return new Intl.NumberFormat('es-AR', options).format(Number(amount) || 0);
}

// Mostrar notificaci√≥n
function showNotification(message) {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #1F2937;
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 0.5rem;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.3);
        z-index: 2000;
        animation: slideIn 0.3s ease;
    `;
    notification.textContent = message;

    const style = document.createElement('style');
    style.textContent = `
        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
    `;
    document.head.appendChild(style);

    document.body.appendChild(notification);

    setTimeout(() => {
        notification.style.animation = 'slideIn 0.3s ease reverse';
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

// ==========================================
// FUNCIONES DE BACKUP Y EXPORTACI√ìN
// ==========================================

function downloadCSV() {
    const month = AppState.currentMonth;
    const monthName = new Date(month + '-01').toLocaleDateString('es-ES', { month: 'long', year: 'numeric' });
    
    // Procesar transacciones: filtrar, formatear y ordenar
    const transactions = AppState.transactions
        .filter(t => t.date && t.date.startsWith(month))
        .map(t => {
            // Asegurar que la fecha est√© en formato YYYY-MM-DD
            let formattedDate = t.date;
            if (formattedDate && formattedDate.length === 10) {
                // Si ya est√° en formato YYYY-MM-DD, dejarlo as√≠
                formattedDate = formattedDate;
            } else if (formattedDate) {
                // Si no, intentar formatear desde timestamp o lo que sea
                try {
                    const date = new Date(formattedDate);
                    if (!isNaN(date.getTime())) {
                        formattedDate = date.toISOString().split('T')[0];
                    }
                } catch (e) {
                    console.error('Error al formatear fecha:', e);
                }
            }

            return {
                ...t,
                date: formattedDate,
                // Escapar comillas y formatear para CSV
                description: t.description ? `"${String(t.description).replace(/"/g, '""')}"` : '""',
                category: t.category ? `"${String(t.category).replace(/"/g, '""')}"` : '""',
                module: t.module ? `"${String(t.module).replace(/"/g, '""')}"` : '""',
                // Formatear monto con coma como separador decimal y siempre 2 decimales
                amount: typeof t.amount === 'number' ? t.amount.toFixed(2).replace(/\./, ',') : '0,00'
            };
        })
        .sort((a, b) => new Date(b.date) - new Date(a.date)); // Ordenar por fecha descendente
    
    if (transactions.length === 0) {
        showNotification('‚ö†Ô∏è No hay transacciones en este mes', 'warning');
        return;
    }
    
    // Crear encabezados y filas del CSV
    const headers = ['Fecha', 'Tipo', 'Categor√≠a', 'M√≥dulo', 'Descripci√≥n', 'Monto'];
    const csvContent = [
        headers.join(','), // Encabezados
        ...transactions.map(t => [
            t.date,
            t.type,
            t.category,
            t.module,
            t.description,
            t.amount
        ].join(','))
    ].join('\n');
    
    // Crear y descargar archivo
    const blob = new Blob(["\uFEFF" + csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `gastos_${monthName.toLowerCase().replace(' ', '_')}.csv`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    updateLastExportTime();
    showNotification(`‚úÖ Exportado ${transactions.length} transacciones a CSV`, 'success');
}

function downloadExcel() {
    if (AppState.transactions.length === 0) {
        showNotification('‚ö†Ô∏è No hay transacciones para exportar', 'warning');
        return;
    }
    
    // Agrupar por mes
    const byMonth = {};
    AppState.transactions.forEach(t => {
        const month = t.date.substring(0, 7);
        if (!byMonth[month]) byMonth[month] = [];
        byMonth[month].push(t);
    });
    
    // Crear HTML para Excel
    let html = `
        <html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel">
        <head>
            <meta charset="utf-8">
            <!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets>`;
    
    Object.keys(byMonth).sort().forEach(month => {
        html += `<x:ExcelWorksheet><x:Name>${month}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet>`;
    });
    
    html += `</x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]-->
        </head>
        <body>`;
    
    Object.keys(byMonth).sort().forEach(month => {
        const transactions = byMonth[month];
        const ingresos = transactions.filter(t => t.type === 'ingreso' || t.type === 'venta').reduce((sum, t) => sum + parseFloat(t.amount || 0), 0);
        const gastos = transactions.filter(t => t.type === 'gasto' || t.type === 'compra').reduce((sum, t) => sum + parseFloat(t.amount || 0), 0);
        
        html += `
            <table border="1">
                <caption><h2>${month}</h2></caption>
                <thead>
                    <tr style="background:#4285f4;color:white;font-weight:bold;">
                        <th>Fecha</th>
                        <th>Tipo</th>
                        <th>Categor√≠a</th>
                        <th>M√≥dulo</th>
                        <th>Descripci√≥n</th>
                        <th>Monto</th>
                    </tr>
                </thead>
                <tbody>`;
        
        transactions.forEach(t => {
            html += `
                <tr>
                    <td>${t.date}</td>
                    <td>${t.type}</td>
                    <td>${t.category || ''}</td>
                    <td>${t.module || ''}</td>
                    <td>${t.description || ''}</td>
                    <td>${t.amount}</td>
                </tr>`;
        });
        
        html += `
                    <tr style="background:#f0f0f0;font-weight:bold;">
                        <td colspan="5">INGRESOS</td>
                        <td>$${ingresos.toFixed(2)}</td>
                    </tr>
                    <tr style="background:#f0f0f0;font-weight:bold;">
                        <td colspan="5">GASTOS</td>
                        <td>$${gastos.toFixed(2)}</td>
                    </tr>
                    <tr style="background:#d4edda;font-weight:bold;">
                        <td colspan="5">SALDO</td>
                        <td>$${(ingresos - gastos).toFixed(2)}</td>
                    </tr>
                </tbody>
            </table>
            <br><br>`;
    });
    
    html += `</body></html>`;
    
    // Descargar
    const blob = new Blob([html], { type: 'application/vnd.ms-excel' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `gastos_completo_${new Date().toISOString().slice(0, 10)}.xls`;
    link.click();
    
    updateLastExportTime();
    showNotification('‚úÖ Excel descargado exitosamente', 'success');
}

function downloadJSON() {
    const backup = {
        exportDate: new Date().toISOString(),
        transactions: AppState.transactions,
        modulesByMonth: AppState.modulesByMonth
    };
    
    const blob = new Blob([JSON.stringify(backup, null, 2)], { type: 'application/json' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `backup_completo_${new Date().toISOString().slice(0, 10)}.json`;
    link.click();
    
    updateLastExportTime();
    showNotification('‚úÖ Backup JSON descargado exitosamente', 'success');
}

function updateLastExportTime() {
    const now = new Date().toLocaleString('es-AR');
    const elem = document.getElementById('lastExportTime');
    if (elem) {
        elem.textContent = now;
        localStorage.setItem('lastExportTime', now);
    }
}

function restoreFromBackup() {
    const fileInput = document.getElementById('restoreFileInput');
    fileInput.click();
}

function handleRestoreFile(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    const reader = new FileReader();
    reader.onload = function(e) {
        try {
            const backup = JSON.parse(e.target.result);
            
            // Validar que tenga la estructura correcta
            if (!backup.transactions || !Array.isArray(backup.transactions)) {
                alert('‚ùå El archivo no tiene un formato v√°lido');
                event.target.value = '';
                return;
            }
            
            // Detectar qu√© meses tiene el backup
            const monthsInBackup = new Set();
            backup.transactions.forEach(t => {
                const month = t.date.substring(0, 7);
                monthsInBackup.add(month);
            });
            
            const monthsList = Array.from(monthsInBackup).sort();
            
            if (monthsList.length === 0) {
                alert('‚ùå El backup no contiene transacciones');
                event.target.value = '';
                return;
            }
            
            // Mostrar opciones al usuario
            let userChoice;
            if (monthsList.length === 1) {
                // Solo hay un mes
                userChoice = confirm(`El backup contiene el mes: ${monthsList[0]}\n\n¬øQuieres restaurar este mes?\n\nOK = Restaurar solo este mes\nCancelar = No hacer nada`);
                
                if (!userChoice) {
                    event.target.value = '';
                    return;
                }
                
                // Restaurar solo ese mes
                restoreSingleMonth(backup, monthsList[0]);
                
            } else {
                // M√∫ltiples meses - dar opciones
                const monthsText = monthsList.join(', ');
                const choice = prompt(`üìä El backup contiene ${monthsList.length} meses:\n${monthsText}\n\n¬øQu√© quieres hacer?\n\n1 = Restaurar TODO (reemplaza todos los datos)\n2 = Restaurar SOLO UN MES (escribe el mes)\n\nEscribe 1, 2 o el mes (ej: 2025-10):`);
                
                if (!choice) {
                    event.target.value = '';
                    return;
                }
                
                if (choice === '1') {
                    // Restaurar TODO
                    const confirmAll = confirm(`‚ö†Ô∏è ¬øReemplazar TODOS los datos actuales con los ${backup.transactions.length} transacciones del backup?`);
                    
                    if (confirmAll) {
                        AppState.transactions = backup.transactions || [];
                        AppState.modulesByMonth = backup.modulesByMonth || {};
                        
                        saveDataToFirebase()
                            .then(() => {
                                showNotification(`‚úÖ ${backup.transactions.length} transacciones restauradas`, 'success');
                                updateDashboard();
                                displayTransactions();
                                displayModulesCards();
                            })
                            .catch(error => {
                                alert('‚ùå Error: ' + error.message);
                            });
                    }
                    
                } else if (choice === '2' || monthsList.includes(choice)) {
                    // Restaurar un mes espec√≠fico
                    let selectedMonth = choice === '2' ? prompt(`Escribe el mes (${monthsList.join(', ')}):`) : choice;
                    
                    if (selectedMonth && monthsList.includes(selectedMonth)) {
                        restoreSingleMonth(backup, selectedMonth);
                    } else {
                        alert('‚ùå Mes no v√°lido');
                    }
                } else {
                    alert('‚ùå Opci√≥n no v√°lida');
                }
            }
            
        } catch (error) {
            console.error('‚ùå Error leyendo backup:', error);
            alert('‚ùå Error al leer el archivo JSON: ' + error.message);
        }
        
        // Limpiar input
        event.target.value = '';
    };
    
    reader.readAsText(file);
}

function restoreSingleMonth(backup, month) {
    const transactionsToRestore = backup.transactions.filter(t => t.date.startsWith(month));
    
    const confirmation = confirm(`¬øRestaurar ${transactionsToRestore.length} transacciones del mes ${month}?\n\nEsto REEMPLAZAR√Å las transacciones actuales de ese mes.`);
    
    if (!confirmation) return;
    
    // Eliminar transacciones del mes seleccionado
    AppState.transactions = AppState.transactions.filter(t => !t.date.startsWith(month));
    
    // Agregar transacciones del backup para ese mes
    AppState.transactions.push(...transactionsToRestore);
    
    // Restaurar m√≥dulos de ese mes si existen
    if (backup.modulesByMonth && backup.modulesByMonth[month]) {
        AppState.modulesByMonth[month] = backup.modulesByMonth[month];
    }
    
    // Guardar en Firebase
    saveDataToFirebase()
        .then(() => {
            showNotification(`‚úÖ Mes ${month} restaurado con ${transactionsToRestore.length} transacciones`, 'success');
            
            // Si estamos viendo ese mes, actualizar la vista
            if (AppState.currentMonth === month) {
                updateDashboard();
                displayTransactions();
                displayModulesCards();
            }
            
            console.log(`‚úÖ Mes ${month} restaurado:`, transactionsToRestore.length, 'transacciones');
        })
        .catch(error => {
            console.error('‚ùå Error restaurando mes:', error);
            alert('‚ùå Error al restaurar: ' + error.message);
        });
}

// Exportar funciones globales
window.deleteTransaction = deleteTransaction;
window.editTransaction = editTransaction;
window.cancelEdit = cancelEdit;
window.editAddDetail = editAddDetail;

// Guardar datos en Firebase (funci√≥n m√≠nima para evitar errores si se llama)
async function saveDataToFirebase() {
    if (!window.db) {
        console.log('‚ÑπÔ∏è saveDataToFirebase: No hay instancia de Firebase (window.db) ‚Äî omitiendo subida');
        return Promise.resolve();
    }

    try {
        const { doc, setDoc } = await import('https://www.gstatic.com/firebasejs/9.6.0/firebase-firestore.js');
        const ref = doc(db, 'backups', 'latest');
        await setDoc(ref, {
            updatedAt: new Date().toISOString(),
            modulesByMonth: AppState.modulesByMonth,
            transactions: AppState.transactions.slice(-5000) // evitar subir un payload excesivo
        });
        console.log('‚úÖ saveDataToFirebase: datos guardados (backup.latest)');
        return Promise.resolve();
    } catch (error) {
        console.error('‚ùå saveDataToFirebase error:', error);
        return Promise.reject(error);
    }
}

// ==========================================
// IMPORTACI√ìN DE TRANSACCIONES DESDE CSV
// ==========================================

document.addEventListener('DOMContentLoaded', () => {
    const importBtn = document.getElementById('importTransactionsBtn');
    const fileInput = document.getElementById('fileInput');
    
    if (importBtn && fileInput) {
        importBtn.addEventListener('click', () => fileInput.click());
        fileInput.addEventListener('change', handleFileImport);
    }
});

async function handleFileImport(event) {
    const file = event.target.files[0];
    if (!file) return;

    try {
        const transactions = await parseCSV(file);
        if (transactions && transactions.length > 0) {
            showImportPreview(transactions);
        }
    } catch (error) {
        console.error('Error al importar transacciones:', error);
        showNotification('Error al importar transacciones', 'error');
    }
    
    // Limpiar el input para permitir importar el mismo archivo de nuevo
    event.target.value = '';
}

function parseCSV(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const text = e.target.result;
                console.log('Primeras 500 caracteres del archivo:', text.substring(0, 500));
                
                // Normalizar saltos de l√≠nea y dividir en l√≠neas
                const lines = text.split(/\r?\n/).filter(line => line.trim() !== '');
                console.log(`Total de l√≠neas encontradas: ${lines.length}`);
                
                if (lines.length === 0) {
                    throw new Error('El archivo est√° vac√≠o');
                }

                // Verificar si la primera l√≠nea contiene encabezados
                const firstLine = lines[0].toLowerCase();
                console.log('Primera l√≠nea del archivo:', firstLine);
                
                const hasHeaders = firstLine.includes('fecha') && 
                                 (firstLine.includes('descrip') || firstLine.includes('concepto'));
                
                // Si hay encabezados, los usamos, si no, asumimos el orden de Mercado Pago
                let headers = [];
                let startIndex = 0;
                
                if (hasHeaders) {
                    headers = lines[0].split(',').map(h => h.trim().toLowerCase());
                    startIndex = 1; // Saltar la fila de encabezados
                } else {
                    // Asumir orden de Mercado Pago: Fecha, Hora, Descripci√≥n, Importe, Saldo
                    headers = ['fecha', 'hora', 'descripcion', 'importe', 'saldo'];
                }
                
                console.log('Encabezados detectados:', headers);
                
                const transactions = [];
                const categoryMap = {
                    'mercadopago': 'servicios',
                    'transferencia': 'transferencia',
                    'pago': 'pagos',
                    'cobro': 'ingresos',
                    'retiro': 'efectivo',
                    'deposito': 'ingresos',
                    'cuentadni': 'transferencia',
                    'pago de servicios': 'servicios',
                    'pago de tarjeta': 'tarjeta'
                };
                
                for (let i = startIndex; i < lines.length; i++) {
                    try {
                        const line = lines[i];
                        if (!line.trim()) continue;
                        
                        // Manejar comas dentro de campos entre comillas
                        const values = [];
                        let inQuotes = false;
                        let currentValue = '';
                        
                        for (let j = 0; j < line.length; j++) {
                            const char = line[j];
                            
                            if (char === '"') {
                                inQuotes = !inQuotes;
                            } else if (char === ',' && !inQuotes) {
                                values.push(currentValue.trim());
                                currentValue = '';
                            } else {
                                currentValue += char;
                            }
                        }
                        values.push(currentValue.trim());
                        
                        // Verificar si la l√≠nea tiene suficientes valores
                        if (values.length < headers.length) {
                            console.warn(`L√≠nea ${i+1} ignorada - No tiene suficientes valores:`, line);
                            continue;
                        }
                        
                        const transaction = {};
                        headers.forEach((header, index) => {
                            if (values[index] !== undefined) {
                                // Eliminar comillas al inicio y final si existen
                                transaction[header] = values[index].replace(/^"/, '').replace(/"$/, '');
                            } else {
                                transaction[header] = '';
                            }
                        });
                        
                        // Procesar el monto (puede venir como "1.000,50", "20.20", "-1.000,50", etc.)
                        // Usar normalizeTransaction para asegurar comportamiento consistente
                        const parsedAmount = normalizeTransaction({ amount: transaction.importe }).amount;
                        const amount = parsedAmount || 0;
                        
                        // Determinar si es ingreso o gasto basado en el signo del monto
                        const isIncome = amount > 0;
                        
                        // Determinar categor√≠a basada en la descripci√≥n
                        let category = 'otros';
                        const descLower = (transaction.descripcion || '').toLowerCase();
                        
                        for (const [key, value] of Object.entries(categoryMap)) {
                            if (descLower.includes(key)) {
                                category = value;
                                break;
                            }
                        }
                        
                        // Formatear fecha (asumiendo formato DD/MM/AAAA)
                        let formattedDate = new Date().toISOString().split('T')[0];
                        if (transaction.fecha) {
                            // Manejar diferentes formatos de fecha
                            const dateParts = transaction.fecha.split(/[\/\-.]/);
                            if (dateParts.length === 3) {
                                let day, month, year;
                                
                                // Intentar determinar el formato de fecha
                                if (dateParts[0].length === 4) {
                                    // Formato YYYY/MM/DD
                                    [year, month, day] = dateParts;
                                } else {
                                    // Asumir formato DD/MM/YYYY
                                    [day, month, year] = dateParts;
                                }
                                
                                // Asegurar que el a√±o tenga 4 d√≠gitos
                                if (year.length === 2) {
                                    year = '20' + year;
                                }
                                
                                formattedDate = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
                            }
                        }
                        
                        const transactionObj = {
                            id: `mp-${Date.now()}-${i}`,
                            date: formattedDate,
                            description: (transaction.descripcion || '').trim(),
                            amount: Math.abs(amount),
                            type: isIncome ? 'ingreso' : 'gasto',
                            category: category,
                            module: 'general',
                            imported: true,
                            source: 'mercadopago',
                            originalData: { ...transaction } // Guardar datos originales para referencia
                        };
                        
                        // Solo agregar si el monto es mayor a 0
                        if (transactionObj.amount > 0) {
                            transactions.push(transactionObj);
                            
                            // Mostrar las primeras 5 transacciones en consola
                            if (transactions.length <= 5) {
                                console.log('Transacci√≥n procesada:', transactionObj);
                            }
                        }
                    } catch (lineError) {
                        console.error(`Error en la l√≠nea ${i+1}:`, lineError);
                        console.error('Contenido de la l√≠nea:', lines[i]);
                    }
                }
                
                console.log(`Total de transacciones procesadas: ${transactions.length}`);
                
                // Ordenar por fecha (m√°s recientes primero)
                const validTransactions = transactions
                    .sort((a, b) => new Date(b.date) - new Date(a.date));
                
                resolve(validTransactions);
            } catch (error) {
                console.error('Error al analizar el archivo CSV:', error);
                reject(new Error('Formato de archivo CSV inv√°lido: ' + error.message));
            }
        };
        reader.onerror = () => {
            console.error('Error al leer el archivo');
            reject(new Error('Error al leer el archivo'));
        };
        reader.readAsText(file, 'UTF-8');
    });
}

function showImportPreview(transactions) {
    // Crear modal
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        padding: 20px;
        box-sizing: border-box;
    `;
    
    // Crear contenido del modal
    const modalContent = document.createElement('div');
    modalContent.style.cssText = `
        background: white;
        padding: 25px;
        border-radius: 12px;
        width: 100%;
        max-width: 800px;
        max-height: 80vh;
        overflow-y: auto;
        box-shadow: 0 10px 25px rgba(0,0,0,0.2);
    `;
    
    // T√≠tulo
    const title = document.createElement('h3');
    title.textContent = `Vista previa de importaci√≥n (${transactions.length} transacciones)`;
    title.style.marginTop = '0';
    title.style.color = '#2D3748';
    modalContent.appendChild(title);
    
    // Tabla de vista previa
    const table = document.createElement('table');
    table.style.width = '100%';
    table.style.borderCollapse = 'collapse';
    table.style.marginTop = '15px';
    table.style.fontSize = '14px';
    
    // Encabezados de la tabla
    const thead = document.createElement('thead');
    const headerRow = document.createElement('tr');
    headerRow.style.backgroundColor = '#F7FAFC';
    
    ['Fecha', 'Descripci√≥n', 'Monto', 'Tipo', 'Categor√≠a'].forEach(text => {
        const th = document.createElement('th');
        th.textContent = text;
        th.style.padding = '10px 12px';
        th.style.borderBottom = '1px solid #E2E8F0';
        th.style.textAlign = 'left';
        th.style.fontWeight = '600';
        th.style.color = '#4A5568';
        headerRow.appendChild(th);
    });
    
    thead.appendChild(headerRow);
    table.appendChild(thead);
    
    // Filas de la tabla
    const tbody = document.createElement('tbody');
    const previewCount = Math.min(transactions.length, 10);
    
    for (let i = 0; i < previewCount; i++) {
        const t = transactions[i];
        const tr = document.createElement('tr');
        tr.style.borderBottom = '1px solid #EDF2F7';
        
        if (i % 2 === 0) {
            tr.style.backgroundColor = '#F8FAFC';
        }
        
        const dateCell = document.createElement('td');
        dateCell.textContent = t.date;
        dateCell.style.padding = '10px 12px';
        dateCell.style.color = '#4A5568';
        tr.appendChild(dateCell);
        
        const descCell = document.createElement('td');
        descCell.textContent = t.description;
        descCell.style.padding = '10px 12px';
        descCell.style.color = '#2D3748';
        tr.appendChild(descCell);
        
        const amountCell = document.createElement('td');
        amountCell.textContent = formatCurrency(t.amount);
        amountCell.style.padding = '10px 12px';
        amountCell.style.fontWeight = '500';
        amountCell.style.color = t.type === 'ingreso' ? '#10B981' : '#EF4444';
        tr.appendChild(amountCell);
        
        const typeCell = document.createElement('td');
        typeCell.textContent = t.type === 'ingreso' ? 'Ingreso' : 'Gasto';
        typeCell.style.padding = '10px 12px';
        typeCell.style.color = t.type === 'ingreso' ? '#10B981' : '#EF4444';
        typeCell.style.fontWeight = '500';
        tr.appendChild(typeCell);
        
        const catCell = document.createElement('td');
        catCell.textContent = t.category.charAt(0).toUpperCase() + t.category.slice(1);
        catCell.style.padding = '10px 12px';
        catCell.style.color = '#4A5568';
        tr.appendChild(catCell);
        
        tbody.appendChild(tr);
    }
    
    table.appendChild(tbody);
    modalContent.appendChild(table);
    
    // Mensaje de transacciones adicionales
    if (transactions.length > 10) {
        const moreInfo = document.createElement('p');
        moreInfo.textContent = `... y ${transactions.length - 10} transacciones m√°s`;
        moreInfo.style.textAlign = 'center';
        moreInfo.style.margin = '10px 0';
        moreInfo.style.color = '#718096';
        moreInfo.style.fontSize = '0.9em';
        modalContent.appendChild(moreInfo);
    }
    
    // Resumen
    const summary = document.createElement('div');
    summary.style.margin = '15px 0';
    summary.style.padding = '12px';
    summary.style.backgroundColor = '#F0FDF4';
    summary.style.borderRadius = '6px';
    summary.style.borderLeft = '4px solid #10B981';
    
    const totalIncome = transactions
        .filter(t => t.type === 'ingreso')
        .reduce((sum, t) => sum + t.amount, 0);
        
    const totalExpenses = transactions
        .filter(t => t.type === 'gasto')
        .reduce((sum, t) => sum + t.amount, 0);
    
    summary.innerHTML = `
        <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
            <span style="color: #4B5563;">Total Ingresos:</span>
            <span style="color: #10B981; font-weight: 600;">${formatCurrency(totalIncome)}</span>
        </div>
        <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
            <span style="color: #4B5563;">Total Gastos:</span>
            <span style="color: #EF4444; font-weight: 600;">${formatCurrency(totalExpenses)}</span>
        </div>
        <div style="display: flex; justify-content: space-between; margin-top: 8px; padding-top: 8px; border-top: 1px dashed #D1FAE5;">
            <span style="color: #4B5563; font-weight: 600;">Saldo Neto:</span>
            <span style="color: ${totalIncome >= totalExpenses ? '#10B981' : '#EF4444'}; font-weight: 700;">
                ${formatCurrency(totalIncome - totalExpenses)}
            </span>
        </div>
    `;
    
    modalContent.appendChild(summary);
    
    // Botones
    const buttons = document.createElement('div');
    buttons.style.display = 'flex';
    buttons.style.justifyContent = 'flex-end';
    buttons.style.gap = '10px';
    buttons.style.marginTop = '20px';
    buttons.style.paddingTop = '15px';
    buttons.style.borderTop = '1px solid #E2E8F0';
    
    const cancelBtn = document.createElement('button');
    cancelBtn.textContent = 'Cancelar';
    cancelBtn.className = 'btn-secondary';
    cancelBtn.style.padding = '8px 16px';
    cancelBtn.style.borderRadius = '6px';
    cancelBtn.style.border = '1px solid #E2E8F0';
    cancelBtn.style.background = 'white';
    cancelBtn.style.cursor = 'pointer';
    cancelBtn.style.transition = 'all 0.2s';
    cancelBtn.onmouseover = () => cancelBtn.style.backgroundColor = '#F8FAFC';
    cancelBtn.onmouseout = () => cancelBtn.style.backgroundColor = 'white';
    cancelBtn.onclick = () => document.body.removeChild(modal);
    
    const confirmBtn = document.createElement('button');
    confirmBtn.textContent = 'Confirmar Importaci√≥n';
    confirmBtn.className = 'btn-primary';
    confirmBtn.style.padding = '8px 20px';
    confirmBtn.style.borderRadius = '6px';
    confirmBtn.style.border = 'none';
    confirmBtn.style.background = '#4F46E5';
    confirmBtn.style.color = 'white';
    confirmBtn.style.fontWeight = '600';
    confirmBtn.style.cursor = 'pointer';
    confirmBtn.style.transition = 'all 0.2s';
    confirmBtn.onmouseover = () => confirmBtn.style.backgroundColor = '#4338CA';
    confirmBtn.onmouseout = () => confirmBtn.style.backgroundColor = '#4F46E5';
    
    confirmBtn.onclick = async () => {
        try {
            // Mostrar indicador de carga
            confirmBtn.disabled = true;
            confirmBtn.innerHTML = '<span class="spinner">‚è≥</span> Importando...';
            
            await saveImportedTransactions(transactions);
            updateDashboard();
            displayTransactions();
            
            // Cerrar el modal despu√©s de un breve retraso para mostrar el mensaje
            const successMsg = document.createElement('div');
            successMsg.textContent = `¬°${transactions.length} transacciones importadas con √©xito!`;
            successMsg.style.color = '#10B981';
            successMsg.style.marginTop = '15px';
            successMsg.style.textAlign = 'center';
            successMsg.style.fontWeight = '600';
            modalContent.appendChild(successMsg);
            
            // Ocultar botones
            buttons.style.display = 'none';
            
            // Cerrar autom√°ticamente despu√©s de 2 segundos
            setTimeout(() => {
                document.body.removeChild(modal);
                showNotification(`Se importaron ${transactions.length} transacciones correctamente`);
            }, 2000);
            
        } catch (error) {
            console.error('Error al guardar transacciones:', error);
            showNotification('Error al importar transacciones', 'error');
            confirmBtn.disabled = false;
            confirmBtn.textContent = 'Reintentar Importaci√≥n';
        }
    };
    
    buttons.appendChild(cancelBtn);
    buttons.appendChild(confirmBtn);
    modalContent.appendChild(buttons);
    
    modal.appendChild(modalContent);
    document.body.appendChild(modal);
    
    // Cerrar al hacer clic fuera del contenido
    modal.onclick = (e) => {
        if (e.target === modal) {
            document.body.removeChild(modal);
        }
    };
}

async function saveImportedTransactions(transactions) {
    try {
        // Agrupar transacciones por mes
        const transactionsByMonth = {};
        
        transactions.forEach(transaction => {
            // Obtener el mes de la transacci√≥n (formato: YYYY-MM)
            const transactionDate = new Date(transaction.date);
            const transactionMonth = `${transactionDate.getFullYear()}-${String(transactionDate.getMonth() + 1).padStart(2, '0')}`;
            
            // Inicializar el array del mes si no existe
            if (!transactionsByMonth[transactionMonth]) {
                transactionsByMonth[transactionMonth] = [];
            }
            
            // Agregar la transacci√≥n al mes correspondiente
            transactionsByMonth[transactionMonth].push(transaction);
        });
        
        // Guardar transacciones por mes
        // Agregar transacciones al array global AppState.transactions evitando duplicados
        const existingIdsGlobal = new Set(AppState.transactions.map(t => t.id));
        let addedCount = 0;
        for (const monthTransactions of Object.values(transactionsByMonth)) {
            const newTransactions = monthTransactions.filter(t => !existingIdsGlobal.has(t.id));
            if (newTransactions.length > 0) {
                // Normalizar cada transacci√≥n importada antes de agregar
                const normalized = newTransactions.map(nt => normalizeTransaction(nt));
                AppState.transactions.push(...normalized);
                normalized.forEach(nt => existingIdsGlobal.add(nt.id));
                addedCount += normalized.length;
                console.log(`Guardando ${normalized.length} transacciones importadas`);
            }
        }
        console.log(`Total de transacciones a√±adidas: ${addedCount}`);
        
        // Guardar en localStorage
        saveData();
        
        // Si usas Firebase
        if (window.db) {
            try {
                const { writeBatch, collection, doc, serverTimestamp, setDoc } = await import('https://www.gstatic.com/firebasejs/9.6.0/firebase-firestore.js');
                let batch = writeBatch(db);
                const transactionsRef = collection(db, 'transactions');
                
                // Contador para el lote actual
                let batchCount = 0;
                const BATCH_LIMIT = 500;
                
                // Procesar todas las transacciones de todos los meses
                for (const monthTransactions of Object.values(transactionsByMonth)) {
                    for (const transaction of monthTransactions) {
                        const docRef = doc(transactionsRef, transaction.id);
                        batch.set(docRef, {
                            ...transaction,
                            userId: AppState.user?.uid || 'anonymous',
                            createdAt: serverTimestamp(),
                            updatedAt: serverTimestamp()
                        });

                        batchCount++;

                        // Si alcanzamos el l√≠mite del lote, hacemos commit y creamos un nuevo lote
                        if (batchCount >= BATCH_LIMIT) {
                            await batch.commit();
                            // crear un nuevo lote (batch) usando let (corregido arriba)
                            batch = writeBatch(db);
                            batchCount = 0;
                        }
                    }
                }
                
                // Hacer commit del √∫ltimo lote si hay transacciones pendientes
                if (batchCount > 0) {
                    await batch.commit();
                }
                
                console.log('Transacciones guardadas en Firebase');
            } catch (error) {
                console.error('Error al guardar en Firebase:', error);
                // No lanzamos el error para no interrumpir el flujo
            }
        }
        
        // Actualizar la interfaz
        updateDashboard();
        displayTransactions();
        
        return transactions.length;
    } catch (error) {
        console.error('Error en saveImportedTransactions:', error);
        throw error;
    }
}
